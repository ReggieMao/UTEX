package com.utex.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.utex.bean.UserDO;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DO".
*/
public class UserDODao extends AbstractDao<UserDO, Long> {

    public static final String TABLENAME = "USER_DO";

    /**
     * Properties of entity UserDO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ExnowId = new Property(0, Long.class, "exnowId", true, "_id");
        public final static Property Uid = new Property(1, int.class, "uid", false, "UID");
        public final static Property Checking_level = new Property(2, int.class, "checking_level", false, "CHECKING_LEVEL");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property Google_auth_url = new Property(4, String.class, "google_auth_url", false, "GOOGLE_AUTH_URL");
        public final static Property Google_status = new Property(5, boolean.class, "google_status", false, "GOOGLE_STATUS");
        public final static Property Invite_code = new Property(6, String.class, "invite_code", false, "INVITE_CODE");
        public final static Property Ip = new Property(7, String.class, "ip", false, "IP");
        public final static Property Is_activated = new Property(8, int.class, "is_activated", false, "IS_ACTIVATED");
        public final static Property Is_first_login = new Property(9, int.class, "is_first_login", false, "IS_FIRST_LOGIN");
        public final static Property Is_google_authed = new Property(10, int.class, "is_google_authed", false, "IS_GOOGLE_AUTHED");
        public final static Property Safe_level = new Property(11, int.class, "safe_level", false, "SAFE_LEVEL");
        public final static Property Tel = new Property(12, String.class, "tel", false, "TEL");
        public final static Property Tel_status = new Property(13, boolean.class, "tel_status", false, "TEL_STATUS");
        public final static Property Timestamp = new Property(14, String.class, "timestamp", false, "TIMESTAMP");
        public final static Property Twice_auth_way = new Property(15, String.class, "twice_auth_way", false, "TWICE_AUTH_WAY");
        public final static Property User_level = new Property(16, int.class, "user_level", false, "USER_LEVEL");
        public final static Property Vip = new Property(17, int.class, "vip", false, "VIP");
        public final static Property Zendesk_id = new Property(18, String.class, "zendesk_id", false, "ZENDESK_ID");
        public final static Property Sso_url = new Property(19, String.class, "sso_url", false, "SSO_URL");
        public final static Property User_type = new Property(20, String.class, "user_type", false, "USER_TYPE");
        public final static Property Username = new Property(21, String.class, "username", false, "USERNAME");
        public final static Property Token = new Property(22, String.class, "token", false, "TOKEN");
        public final static Property Uuid = new Property(23, String.class, "uuid", false, "UUID");
        public final static Property Email_status = new Property(24, boolean.class, "email_status", false, "EMAIL_STATUS");
        public final static Property Transfer_switch = new Property(25, boolean.class, "transfer_switch", false, "TRANSFER_SWITCH");
    }


    public UserDODao(DaoConfig config) {
        super(config);
    }
    
    public UserDODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: exnowId
                "\"UID\" INTEGER NOT NULL ," + // 1: uid
                "\"CHECKING_LEVEL\" INTEGER NOT NULL ," + // 2: checking_level
                "\"EMAIL\" TEXT," + // 3: email
                "\"GOOGLE_AUTH_URL\" TEXT," + // 4: google_auth_url
                "\"GOOGLE_STATUS\" INTEGER NOT NULL ," + // 5: google_status
                "\"INVITE_CODE\" TEXT," + // 6: invite_code
                "\"IP\" TEXT," + // 7: ip
                "\"IS_ACTIVATED\" INTEGER NOT NULL ," + // 8: is_activated
                "\"IS_FIRST_LOGIN\" INTEGER NOT NULL ," + // 9: is_first_login
                "\"IS_GOOGLE_AUTHED\" INTEGER NOT NULL ," + // 10: is_google_authed
                "\"SAFE_LEVEL\" INTEGER NOT NULL ," + // 11: safe_level
                "\"TEL\" TEXT," + // 12: tel
                "\"TEL_STATUS\" INTEGER NOT NULL ," + // 13: tel_status
                "\"TIMESTAMP\" TEXT," + // 14: timestamp
                "\"TWICE_AUTH_WAY\" TEXT," + // 15: twice_auth_way
                "\"USER_LEVEL\" INTEGER NOT NULL ," + // 16: user_level
                "\"VIP\" INTEGER NOT NULL ," + // 17: vip
                "\"ZENDESK_ID\" TEXT," + // 18: zendesk_id
                "\"SSO_URL\" TEXT," + // 19: sso_url
                "\"USER_TYPE\" TEXT," + // 20: user_type
                "\"USERNAME\" TEXT," + // 21: username
                "\"TOKEN\" TEXT," + // 22: token
                "\"UUID\" TEXT," + // 23: uuid
                "\"EMAIL_STATUS\" INTEGER NOT NULL ," + // 24: email_status
                "\"TRANSFER_SWITCH\" INTEGER NOT NULL );"); // 25: transfer_switch
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserDO entity) {
        stmt.clearBindings();
 
        Long exnowId = entity.getExnowId();
        if (exnowId != null) {
            stmt.bindLong(1, exnowId);
        }
        stmt.bindLong(2, entity.getUid());
        stmt.bindLong(3, entity.getChecking_level());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String google_auth_url = entity.getGoogle_auth_url();
        if (google_auth_url != null) {
            stmt.bindString(5, google_auth_url);
        }
        stmt.bindLong(6, entity.getGoogle_status() ? 1L: 0L);
 
        String invite_code = entity.getInvite_code();
        if (invite_code != null) {
            stmt.bindString(7, invite_code);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(8, ip);
        }
        stmt.bindLong(9, entity.getIs_activated());
        stmt.bindLong(10, entity.getIs_first_login());
        stmt.bindLong(11, entity.getIs_google_authed());
        stmt.bindLong(12, entity.getSafe_level());
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(13, tel);
        }
        stmt.bindLong(14, entity.getTel_status() ? 1L: 0L);
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(15, timestamp);
        }
 
        String twice_auth_way = entity.getTwice_auth_way();
        if (twice_auth_way != null) {
            stmt.bindString(16, twice_auth_way);
        }
        stmt.bindLong(17, entity.getUser_level());
        stmt.bindLong(18, entity.getVip());
 
        String zendesk_id = entity.getZendesk_id();
        if (zendesk_id != null) {
            stmt.bindString(19, zendesk_id);
        }
 
        String sso_url = entity.getSso_url();
        if (sso_url != null) {
            stmt.bindString(20, sso_url);
        }
 
        String user_type = entity.getUser_type();
        if (user_type != null) {
            stmt.bindString(21, user_type);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(22, username);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(23, token);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(24, uuid);
        }
        stmt.bindLong(25, entity.getEmail_status() ? 1L: 0L);
        stmt.bindLong(26, entity.getTransfer_switch() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserDO entity) {
        stmt.clearBindings();
 
        Long exnowId = entity.getExnowId();
        if (exnowId != null) {
            stmt.bindLong(1, exnowId);
        }
        stmt.bindLong(2, entity.getUid());
        stmt.bindLong(3, entity.getChecking_level());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String google_auth_url = entity.getGoogle_auth_url();
        if (google_auth_url != null) {
            stmt.bindString(5, google_auth_url);
        }
        stmt.bindLong(6, entity.getGoogle_status() ? 1L: 0L);
 
        String invite_code = entity.getInvite_code();
        if (invite_code != null) {
            stmt.bindString(7, invite_code);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(8, ip);
        }
        stmt.bindLong(9, entity.getIs_activated());
        stmt.bindLong(10, entity.getIs_first_login());
        stmt.bindLong(11, entity.getIs_google_authed());
        stmt.bindLong(12, entity.getSafe_level());
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(13, tel);
        }
        stmt.bindLong(14, entity.getTel_status() ? 1L: 0L);
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(15, timestamp);
        }
 
        String twice_auth_way = entity.getTwice_auth_way();
        if (twice_auth_way != null) {
            stmt.bindString(16, twice_auth_way);
        }
        stmt.bindLong(17, entity.getUser_level());
        stmt.bindLong(18, entity.getVip());
 
        String zendesk_id = entity.getZendesk_id();
        if (zendesk_id != null) {
            stmt.bindString(19, zendesk_id);
        }
 
        String sso_url = entity.getSso_url();
        if (sso_url != null) {
            stmt.bindString(20, sso_url);
        }
 
        String user_type = entity.getUser_type();
        if (user_type != null) {
            stmt.bindString(21, user_type);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(22, username);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(23, token);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(24, uuid);
        }
        stmt.bindLong(25, entity.getEmail_status() ? 1L: 0L);
        stmt.bindLong(26, entity.getTransfer_switch() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserDO readEntity(Cursor cursor, int offset) {
        UserDO entity = new UserDO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // exnowId
            cursor.getInt(offset + 1), // uid
            cursor.getInt(offset + 2), // checking_level
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // email
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // google_auth_url
            cursor.getShort(offset + 5) != 0, // google_status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // invite_code
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ip
            cursor.getInt(offset + 8), // is_activated
            cursor.getInt(offset + 9), // is_first_login
            cursor.getInt(offset + 10), // is_google_authed
            cursor.getInt(offset + 11), // safe_level
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // tel
            cursor.getShort(offset + 13) != 0, // tel_status
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // timestamp
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // twice_auth_way
            cursor.getInt(offset + 16), // user_level
            cursor.getInt(offset + 17), // vip
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // zendesk_id
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // sso_url
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // user_type
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // username
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // token
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // uuid
            cursor.getShort(offset + 24) != 0, // email_status
            cursor.getShort(offset + 25) != 0 // transfer_switch
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserDO entity, int offset) {
        entity.setExnowId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getInt(offset + 1));
        entity.setChecking_level(cursor.getInt(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGoogle_auth_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGoogle_status(cursor.getShort(offset + 5) != 0);
        entity.setInvite_code(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIp(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIs_activated(cursor.getInt(offset + 8));
        entity.setIs_first_login(cursor.getInt(offset + 9));
        entity.setIs_google_authed(cursor.getInt(offset + 10));
        entity.setSafe_level(cursor.getInt(offset + 11));
        entity.setTel(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTel_status(cursor.getShort(offset + 13) != 0);
        entity.setTimestamp(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTwice_auth_way(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUser_level(cursor.getInt(offset + 16));
        entity.setVip(cursor.getInt(offset + 17));
        entity.setZendesk_id(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setSso_url(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUser_type(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setUsername(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setToken(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setUuid(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setEmail_status(cursor.getShort(offset + 24) != 0);
        entity.setTransfer_switch(cursor.getShort(offset + 25) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserDO entity, long rowId) {
        entity.setExnowId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserDO entity) {
        if(entity != null) {
            return entity.getExnowId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserDO entity) {
        return entity.getExnowId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
